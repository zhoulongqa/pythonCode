multiprocessing模块就是跨平台版本的多进程管理包，支持子进程、通信和数据分享、执行不同形式的同步
它与threading.Thread类似，可以利用multiprocessing.Process对象来创建一个进程。该进程可以允许放在Python程序内部编写的函数中，
该process对象与Thread对象的用法相同，拥有is_alive()、join(timeout)、run()、start()、terminate()等方法，属性有：authkey、daemon
（要通过start()设置）、exitcode(进程在运行时为None，如果为-N，表示被信号N结束)、name、pid，此外multiprocessing包中也有Lock/Event/
Semaphore/Condition类，用来同步进程，其用法也与threading包中的同名类一样，multiprocessing的很大一部分与threading使用同一套api，
只不过换到了多进程的情境

这个模块表示像进程一样管理进程，这个是multiprocessing的核心，它与threading很相似，对多核CPU的利用率会比threading好的多

多线程与多进程利用CPU的利用率为啥不一样？
GIL同步机制，GIL会导致很多资源被锁住，而不能被并发访问，所以多使用多进程进行处理
并发效果差，

多进程并发 要使用多进程



